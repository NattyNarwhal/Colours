
// This file has been generated by the GUI designer. Do not modify.

public partial class MainWindow
{
	private global::Gtk.UIManager UIManager;

	private global::Gtk.Action EditAction;

	private global::Gtk.Action ColorAction;

	private global::Gtk.Action goBackAction;

	private global::Gtk.Action goForwardAction;

	private global::Gtk.Action CopyHexColorAction;

	private global::Gtk.Action CopyHSLColorAction;

	private global::Gtk.Action CopyHSVColorAction;

	private global::Gtk.Action PasteAcquireAction;

	private global::Gtk.Action refreshAction;

	private global::Gtk.Action BrightenAction;

	private global::Gtk.Action DarkenAction;

	private global::Gtk.Action SaturateAction;

	private global::Gtk.Action DesaturateAction;

	private global::Gtk.Action InvertAction;

	private global::Gtk.Action FileAction;

	private global::Gtk.Action SaveAsHTMLColorAction;

	private global::Gtk.Action quitAction;

	private global::Gtk.Action HelpAction;

	private global::Gtk.Action executeAction;

	private global::Gtk.Action aboutAction;

	private global::Gtk.Action AcquireAction;

	private global::Gtk.Action newAction;

	private global::Gtk.Action openAction;

	private global::Gtk.Action saveAction;

	private global::Gtk.Action saveAsAction;

	private global::Gtk.Action undoAction;

	private global::Gtk.Action redoAction;

	private global::Gtk.Action addAction;

	private global::Gtk.Action deleteAction;

	private global::Gtk.Action AddAllAction;

	private global::Gtk.Action cutAction;

	private global::Gtk.Action copyAction;

	private global::Gtk.Action pasteAction;

	private global::Gtk.Action ExportHTMLAction;

	private global::Gtk.Action propertiesAction;

	private global::Gtk.Action BlendAction;

	private global::Gtk.Action ViewAction;

	private global::Gtk.RadioAction ListAction;

	private global::Gtk.RadioAction GridAction;

	private global::Gtk.VBox mainVbox;

	private global::Gtk.MenuBar menubar1;

	private global::Gtk.HPaned hpaned2;

	private global::Gtk.VBox paddedBox;

	private global::Gtk.ComboBox schemeBox;

	private global::Gtk.VBox colorBox;

	private global::Gtk.VBox eitherBox;

	private global::Gtk.ScrolledWindow GtkScrolledWindow;

	private global::Gtk.TreeView treeview1;

	private global::Colours.ColorGridWidget colorgridwidget1;

	protected virtual void Build()
	{
		global::Stetic.Gui.Initialize(this);
		// Widget MainWindow
		this.UIManager = new global::Gtk.UIManager();
		global::Gtk.ActionGroup w1 = new global::Gtk.ActionGroup("Default");
		this.EditAction = new global::Gtk.Action("EditAction", global::Mono.Unix.Catalog.GetString("_Edit"), null, null);
		this.EditAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Edit");
		w1.Add(this.EditAction, null);
		this.ColorAction = new global::Gtk.Action("ColorAction", global::Mono.Unix.Catalog.GetString("_Color"), null, null);
		this.ColorAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Color");
		w1.Add(this.ColorAction, null);
		this.goBackAction = new global::Gtk.Action("goBackAction", global::Mono.Unix.Catalog.GetString("_Back"), null, "gtk-go-back");
		this.goBackAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Undo");
		w1.Add(this.goBackAction, "<Primary>Left");
		this.goForwardAction = new global::Gtk.Action("goForwardAction", global::Mono.Unix.Catalog.GetString("_Forward"), null, "gtk-go-forward");
		this.goForwardAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Redo");
		w1.Add(this.goForwardAction, "<Primary>Right");
		this.CopyHexColorAction = new global::Gtk.Action("CopyHexColorAction", global::Mono.Unix.Catalog.GetString("Copy He_x"), null, null);
		this.CopyHexColorAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Copy He_x");
		w1.Add(this.CopyHexColorAction, null);
		this.CopyHSLColorAction = new global::Gtk.Action("CopyHSLColorAction", global::Mono.Unix.Catalog.GetString("Copy HS_L"), null, null);
		this.CopyHSLColorAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Copy HS_L");
		w1.Add(this.CopyHSLColorAction, null);
		this.CopyHSVColorAction = new global::Gtk.Action("CopyHSVColorAction", global::Mono.Unix.Catalog.GetString("Copy HS_V"), null, null);
		this.CopyHSVColorAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Copy HS_V");
		w1.Add(this.CopyHSVColorAction, null);
		this.PasteAcquireAction = new global::Gtk.Action("PasteAcquireAction", global::Mono.Unix.Catalog.GetString("_Paste"), null, null);
		this.PasteAcquireAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Paste");
		w1.Add(this.PasteAcquireAction, null);
		this.refreshAction = new global::Gtk.Action("refreshAction", global::Mono.Unix.Catalog.GetString("_Random"), null, "gtk-refresh");
		this.refreshAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Rando_m");
		w1.Add(this.refreshAction, "<Primary>r");
		this.BrightenAction = new global::Gtk.Action("BrightenAction", global::Mono.Unix.Catalog.GetString("_Brighten"), null, null);
		this.BrightenAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Brighten");
		w1.Add(this.BrightenAction, "<Primary>k");
		this.DarkenAction = new global::Gtk.Action("DarkenAction", global::Mono.Unix.Catalog.GetString("Dar_ken"), null, null);
		this.DarkenAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Dar_ken");
		w1.Add(this.DarkenAction, "<Primary>j");
		this.SaturateAction = new global::Gtk.Action("SaturateAction", global::Mono.Unix.Catalog.GetString("_Saturate"), null, null);
		this.SaturateAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Saturate");
		w1.Add(this.SaturateAction, "<Primary>l");
		this.DesaturateAction = new global::Gtk.Action("DesaturateAction", global::Mono.Unix.Catalog.GetString("_Desaturate"), null, null);
		this.DesaturateAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Desaturate");
		w1.Add(this.DesaturateAction, "<Primary>h");
		this.InvertAction = new global::Gtk.Action("InvertAction", global::Mono.Unix.Catalog.GetString("_Invert"), null, null);
		this.InvertAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Invert");
		w1.Add(this.InvertAction, null);
		this.FileAction = new global::Gtk.Action("FileAction", global::Mono.Unix.Catalog.GetString("_File"), null, null);
		this.FileAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_File");
		w1.Add(this.FileAction, null);
		this.SaveAsHTMLColorAction = new global::Gtk.Action("SaveAsHTMLColorAction", global::Mono.Unix.Catalog.GetString("_Save as HTML"), null, null);
		this.SaveAsHTMLColorAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Save as HTML");
		w1.Add(this.SaveAsHTMLColorAction, null);
		this.quitAction = new global::Gtk.Action("quitAction", global::Mono.Unix.Catalog.GetString("_Quit"), null, "gtk-quit");
		this.quitAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Quit");
		w1.Add(this.quitAction, null);
		this.HelpAction = new global::Gtk.Action("HelpAction", global::Mono.Unix.Catalog.GetString("_Help"), null, null);
		this.HelpAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Help");
		w1.Add(this.HelpAction, null);
		this.executeAction = new global::Gtk.Action("executeAction", global::Mono.Unix.Catalog.GetString("_Execute"), null, "gtk-execute");
		this.executeAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Execute");
		w1.Add(this.executeAction, null);
		this.aboutAction = new global::Gtk.Action("aboutAction", global::Mono.Unix.Catalog.GetString("_About"), null, "gtk-about");
		this.aboutAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_About");
		w1.Add(this.aboutAction, null);
		this.AcquireAction = new global::Gtk.Action("AcquireAction", global::Mono.Unix.Catalog.GetString("_Acquire"), null, null);
		this.AcquireAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Acquire");
		w1.Add(this.AcquireAction, null);
		this.newAction = new global::Gtk.Action("newAction", global::Mono.Unix.Catalog.GetString("_New"), null, "gtk-new");
		this.newAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_New");
		w1.Add(this.newAction, null);
		this.openAction = new global::Gtk.Action("openAction", global::Mono.Unix.Catalog.GetString("_Open"), null, "gtk-open");
		this.openAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Open");
		w1.Add(this.openAction, null);
		this.saveAction = new global::Gtk.Action("saveAction", global::Mono.Unix.Catalog.GetString("_Save"), null, "gtk-save");
		this.saveAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Save");
		w1.Add(this.saveAction, null);
		this.saveAsAction = new global::Gtk.Action("saveAsAction", global::Mono.Unix.Catalog.GetString("Save _As"), null, "gtk-save-as");
		this.saveAsAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Save _As");
		w1.Add(this.saveAsAction, null);
		this.undoAction = new global::Gtk.Action("undoAction", global::Mono.Unix.Catalog.GetString("_Undo"), null, "gtk-undo");
		this.undoAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Undo");
		w1.Add(this.undoAction, "<Primary>z");
		this.redoAction = new global::Gtk.Action("redoAction", global::Mono.Unix.Catalog.GetString("_Redo"), null, "gtk-redo");
		this.redoAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Redo");
		w1.Add(this.redoAction, "<Primary>y");
		this.addAction = new global::Gtk.Action("addAction", global::Mono.Unix.Catalog.GetString("_Add"), null, "gtk-add");
		this.addAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Add");
		w1.Add(this.addAction, "<Primary>a");
		this.deleteAction = new global::Gtk.Action("deleteAction", global::Mono.Unix.Catalog.GetString("_Delete"), null, "gtk-delete");
		this.deleteAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Delete");
		w1.Add(this.deleteAction, "Delete");
		this.AddAllAction = new global::Gtk.Action("AddAllAction", global::Mono.Unix.Catalog.GetString("Add A_ll"), null, null);
		this.AddAllAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Add A_ll");
		w1.Add(this.AddAllAction, null);
		this.cutAction = new global::Gtk.Action("cutAction", global::Mono.Unix.Catalog.GetString("Cu_t"), null, "gtk-cut");
		this.cutAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Cu_t");
		w1.Add(this.cutAction, null);
		this.copyAction = new global::Gtk.Action("copyAction", global::Mono.Unix.Catalog.GetString("_Copy"), null, "gtk-copy");
		this.copyAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Copy");
		w1.Add(this.copyAction, null);
		this.pasteAction = new global::Gtk.Action("pasteAction", global::Mono.Unix.Catalog.GetString("_Paste"), null, "gtk-paste");
		this.pasteAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Paste");
		w1.Add(this.pasteAction, null);
		this.ExportHTMLAction = new global::Gtk.Action("ExportHTMLAction", global::Mono.Unix.Catalog.GetString("Export _HTML"), null, null);
		this.ExportHTMLAction.ShortLabel = global::Mono.Unix.Catalog.GetString("Export HTML");
		w1.Add(this.ExportHTMLAction, null);
		this.propertiesAction = new global::Gtk.Action("propertiesAction", global::Mono.Unix.Catalog.GetString("_Properties"), null, "gtk-properties");
		this.propertiesAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Properties");
		w1.Add(this.propertiesAction, null);
		this.BlendAction = new global::Gtk.Action("BlendAction", global::Mono.Unix.Catalog.GetString("_Blend..."), null, null);
		this.BlendAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Blend...");
		w1.Add(this.BlendAction, null);
		this.ViewAction = new global::Gtk.Action("ViewAction", global::Mono.Unix.Catalog.GetString("_View"), null, null);
		this.ViewAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_View");
		w1.Add(this.ViewAction, null);
		this.ListAction = new global::Gtk.RadioAction("ListAction", global::Mono.Unix.Catalog.GetString("_List"), null, null, 0);
		this.ListAction.Group = new global::GLib.SList(global::System.IntPtr.Zero);
		this.ListAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_List");
		w1.Add(this.ListAction, null);
		this.GridAction = new global::Gtk.RadioAction("GridAction", global::Mono.Unix.Catalog.GetString("_Grid"), null, null, 0);
		this.GridAction.Group = this.ListAction.Group;
		this.GridAction.ShortLabel = global::Mono.Unix.Catalog.GetString("_Grid");
		w1.Add(this.GridAction, null);
		this.UIManager.InsertActionGroup(w1, 0);
		this.AddAccelGroup(this.UIManager.AccelGroup);
		this.Name = "MainWindow";
		this.Title = global::Mono.Unix.Catalog.GetString("MainWindow");
		this.WindowPosition = ((global::Gtk.WindowPosition)(4));
		// Container child MainWindow.Gtk.Container+ContainerChild
		this.mainVbox = new global::Gtk.VBox();
		this.mainVbox.Name = "mainVbox";
		// Container child mainVbox.Gtk.Box+BoxChild
		this.UIManager.AddUiFromString("<ui><menubar name=\'menubar1\'><menu name=\'FileAction\' action=\'FileAction\'><menuite" +
				"m name=\'newAction\' action=\'newAction\'/><menuitem name=\'openAction\' action=\'openA" +
				"ction\'/><menuitem name=\'saveAction\' action=\'saveAction\'/><menuitem name=\'saveAsA" +
				"ction\' action=\'saveAsAction\'/><separator/><menuitem name=\'propertiesAction\' acti" +
				"on=\'propertiesAction\'/><separator/><menuitem name=\'ExportHTMLAction\' action=\'Exp" +
				"ortHTMLAction\'/><separator/><menuitem name=\'quitAction\' action=\'quitAction\'/></m" +
				"enu><menu name=\'EditAction\' action=\'EditAction\'><menuitem name=\'undoAction\' acti" +
				"on=\'undoAction\'/><menuitem name=\'redoAction\' action=\'redoAction\'/><separator/><m" +
				"enuitem name=\'cutAction\' action=\'cutAction\'/><menuitem name=\'copyAction\' action=" +
				"\'copyAction\'/><menuitem name=\'pasteAction\' action=\'pasteAction\'/><separator/><me" +
				"nuitem name=\'addAction\' action=\'addAction\'/><menuitem name=\'AddAllAction\' action" +
				"=\'AddAllAction\'/><menuitem name=\'deleteAction\' action=\'deleteAction\'/></menu><me" +
				"nu name=\'ViewAction\' action=\'ViewAction\'><menuitem name=\'ListAction\' action=\'Lis" +
				"tAction\'/><menuitem name=\'GridAction\' action=\'GridAction\'/></menu><menu name=\'Ac" +
				"quireAction\' action=\'AcquireAction\'><menuitem name=\'PasteAcquireAction\' action=\'" +
				"PasteAcquireAction\'/><menuitem name=\'refreshAction\' action=\'refreshAction\'/><sep" +
				"arator/><menuitem name=\'BlendAction\' action=\'BlendAction\'/></menu><menu name=\'Co" +
				"lorAction\' action=\'ColorAction\'><menuitem name=\'goBackAction\' action=\'goBackActi" +
				"on\'/><menuitem name=\'goForwardAction\' action=\'goForwardAction\'/><separator/><men" +
				"uitem name=\'CopyHexColorAction\' action=\'CopyHexColorAction\'/><menuitem name=\'Cop" +
				"yHSLColorAction\' action=\'CopyHSLColorAction\'/><menuitem name=\'CopyHSVColorAction" +
				"\' action=\'CopyHSVColorAction\'/><menuitem name=\'SaveAsHTMLColorAction\' action=\'Sa" +
				"veAsHTMLColorAction\'/><separator/><menuitem name=\'BrightenAction\' action=\'Bright" +
				"enAction\'/><menuitem name=\'DarkenAction\' action=\'DarkenAction\'/><separator/><men" +
				"uitem name=\'SaturateAction\' action=\'SaturateAction\'/><menuitem name=\'DesaturateA" +
				"ction\' action=\'DesaturateAction\'/><separator/><menuitem name=\'InvertAction\' acti" +
				"on=\'InvertAction\'/></menu><menu name=\'HelpAction\' action=\'HelpAction\'><menuitem " +
				"name=\'aboutAction\' action=\'aboutAction\'/></menu></menubar></ui>");
		this.menubar1 = ((global::Gtk.MenuBar)(this.UIManager.GetWidget("/menubar1")));
		this.menubar1.Name = "menubar1";
		this.mainVbox.Add(this.menubar1);
		global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.mainVbox[this.menubar1]));
		w2.Position = 0;
		w2.Expand = false;
		w2.Fill = false;
		// Container child mainVbox.Gtk.Box+BoxChild
		this.hpaned2 = new global::Gtk.HPaned();
		this.hpaned2.CanFocus = true;
		this.hpaned2.Name = "hpaned2";
		this.hpaned2.Position = 156;
		// Container child hpaned2.Gtk.Paned+PanedChild
		this.paddedBox = new global::Gtk.VBox();
		this.paddedBox.Name = "paddedBox";
		this.paddedBox.Spacing = 6;
		this.paddedBox.BorderWidth = ((uint)(6));
		// Container child paddedBox.Gtk.Box+BoxChild
		this.schemeBox = new global::Gtk.ComboBox();
		this.schemeBox.Name = "schemeBox";
		this.paddedBox.Add(this.schemeBox);
		global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(this.paddedBox[this.schemeBox]));
		w3.Position = 0;
		w3.Expand = false;
		w3.Fill = false;
		// Container child paddedBox.Gtk.Box+BoxChild
		this.colorBox = new global::Gtk.VBox();
		this.colorBox.Name = "colorBox";
		this.colorBox.Spacing = 6;
		this.paddedBox.Add(this.colorBox);
		global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.paddedBox[this.colorBox]));
		w4.Position = 1;
		this.hpaned2.Add(this.paddedBox);
		global::Gtk.Paned.PanedChild w5 = ((global::Gtk.Paned.PanedChild)(this.hpaned2[this.paddedBox]));
		w5.Resize = false;
		// Container child hpaned2.Gtk.Paned+PanedChild
		this.eitherBox = new global::Gtk.VBox();
		this.eitherBox.Name = "eitherBox";
		// Container child eitherBox.Gtk.Box+BoxChild
		this.GtkScrolledWindow = new global::Gtk.ScrolledWindow();
		this.GtkScrolledWindow.Name = "GtkScrolledWindow";
		this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
		// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
		this.treeview1 = new global::Gtk.TreeView();
		this.treeview1.CanFocus = true;
		this.treeview1.Name = "treeview1";
		this.treeview1.HeadersVisible = false;
		this.GtkScrolledWindow.Add(this.treeview1);
		this.eitherBox.Add(this.GtkScrolledWindow);
		global::Gtk.Box.BoxChild w7 = ((global::Gtk.Box.BoxChild)(this.eitherBox[this.GtkScrolledWindow]));
		w7.Position = 0;
		// Container child eitherBox.Gtk.Box+BoxChild
		this.colorgridwidget1 = new global::Colours.ColorGridWidget();
		this.colorgridwidget1.Sensitive = false;
		this.colorgridwidget1.Events = ((global::Gdk.EventMask)(256));
		this.colorgridwidget1.Name = "colorgridwidget1";
		this.eitherBox.Add(this.colorgridwidget1);
		global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(this.eitherBox[this.colorgridwidget1]));
		w8.Position = 1;
		w8.Expand = false;
		this.hpaned2.Add(this.eitherBox);
		this.mainVbox.Add(this.hpaned2);
		global::Gtk.Box.BoxChild w10 = ((global::Gtk.Box.BoxChild)(this.mainVbox[this.hpaned2]));
		w10.Position = 1;
		this.Add(this.mainVbox);
		if ((this.Child != null))
		{
			this.Child.ShowAll();
		}
		this.DefaultWidth = 501;
		this.DefaultHeight = 316;
		this.colorgridwidget1.Hide();
		this.Show();
		this.DeleteEvent += new global::Gtk.DeleteEventHandler(this.OnDeleteEvent);
		this.goBackAction.Activated += new global::System.EventHandler(this.OnUndoActionActivated);
		this.goForwardAction.Activated += new global::System.EventHandler(this.OnRedoActionActivated);
		this.CopyHexColorAction.Activated += new global::System.EventHandler(this.OnCopyHexActionActivated);
		this.CopyHSLColorAction.Activated += new global::System.EventHandler(this.OnCopyHSLActionActivated);
		this.CopyHSVColorAction.Activated += new global::System.EventHandler(this.OnCopyHSVActionActivated);
		this.PasteAcquireAction.Activated += new global::System.EventHandler(this.OnPasteAcquireActionActivated);
		this.refreshAction.Activated += new global::System.EventHandler(this.OnRandomActionActivated);
		this.BrightenAction.Activated += new global::System.EventHandler(this.OnBrightenActionActivated);
		this.DarkenAction.Activated += new global::System.EventHandler(this.OnDarkenActionActivated);
		this.SaturateAction.Activated += new global::System.EventHandler(this.OnSaturateActionActivated);
		this.DesaturateAction.Activated += new global::System.EventHandler(this.OnDesaturateActionActivated);
		this.InvertAction.Activated += new global::System.EventHandler(this.OnInvertActionActivated);
		this.SaveAsHTMLColorAction.Activated += new global::System.EventHandler(this.OnSaveAsHTMLColorActionActivated);
		this.quitAction.Activated += new global::System.EventHandler(this.OnQuitActionActivated);
		this.aboutAction.Activated += new global::System.EventHandler(this.OnAboutActionActivated);
		this.newAction.Activated += new global::System.EventHandler(this.OnNewActionActivated);
		this.openAction.Activated += new global::System.EventHandler(this.OnOpenActionActivated);
		this.saveAction.Activated += new global::System.EventHandler(this.OnSaveActionActivated);
		this.saveAsAction.Activated += new global::System.EventHandler(this.OnSaveAsActionActivated);
		this.undoAction.Activated += new global::System.EventHandler(this.OnPaletteUndoActionActivated);
		this.redoAction.Activated += new global::System.EventHandler(this.OnPaletteRedoActionActivated);
		this.addAction.Activated += new global::System.EventHandler(this.OnAddActionActivated);
		this.deleteAction.Activated += new global::System.EventHandler(this.OnDeleteActionActivated);
		this.AddAllAction.Activated += new global::System.EventHandler(this.OnAddAllActionActivated);
		this.cutAction.Activated += new global::System.EventHandler(this.OnCutActionActivated);
		this.copyAction.Activated += new global::System.EventHandler(this.OnCopyActionActivated);
		this.pasteAction.Activated += new global::System.EventHandler(this.OnPasteActionActivated);
		this.ExportHTMLAction.Activated += new global::System.EventHandler(this.OnExportHTMLActionActivated);
		this.propertiesAction.Activated += new global::System.EventHandler(this.OnPropertiesActionActivated);
		this.BlendAction.Activated += new global::System.EventHandler(this.OnBlendActionActivated);
		this.ListAction.Toggled += new global::System.EventHandler(this.OnListActionToggled);
		this.schemeBox.Changed += new global::System.EventHandler(this.OnSchemeBoxChanged);
		this.treeview1.RowActivated += new global::Gtk.RowActivatedHandler(this.OnTreeview1RowActivated);
		this.treeview1.DragEnd += new global::Gtk.DragEndHandler(this.OnTreeview1DragEnd);
		this.treeview1.ButtonPressEvent += new global::Gtk.ButtonPressEventHandler(this.OnTreeview1ButtonPressEvent);
		this.colorgridwidget1.FocusedColorChange += new global::System.EventHandler<System.EventArgs>(this.OnColorgridwidget1FocusedColorChange);
		this.colorgridwidget1.ColorChange += new global::System.EventHandler<Colours.ColorGridChangeEventArgs> (this.OnColorgridwidget1ColorChange);
		this.colorgridwidget1.ColorClick += new global::Gtk.ButtonPressEventHandler(this.OnTreeview1ButtonPressEvent);
	}
}
